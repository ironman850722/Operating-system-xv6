diff --git a/Makefile b/Makefile
index 09d790c..357a4fd 100644
--- a/Makefile
+++ b/Makefile
@@ -52,6 +52,7 @@ endif
 
 # If the makefile can't find QEMU, specify its path here
 # QEMU = qemu-system-i386
+QEMU = /usr/libexec/qemu-kvm
 
 # Try to infer the correct QEMU
 ifndef QEMU
@@ -181,6 +182,7 @@ UPROGS=\
 	_usertests\
 	_wc\
 	_zombie\
+  _syscount\
 
 fs.img: mkfs README $(UPROGS)
 	./mkfs fs.img README $(UPROGS)
diff --git a/defs.h b/defs.h
index 82fb982..d67e8cd 100644
--- a/defs.h
+++ b/defs.h
@@ -120,6 +120,7 @@ void            userinit(void);
 int             wait(void);
 void            wakeup(void*);
 void            yield(void);
+int             getsyscallinfo(void); //Extra
 
 // swtch.S
 void            swtch(struct context**, struct context*);
@@ -187,4 +188,4 @@ int             copyout(pde_t*, uint, void*, uint);
 void            clearpteu(pde_t *pgdir, char *uva);
 
 // number of elements in fixed-size array
-#define NELEM(x) (sizeof(x)/sizeof((x)[0]))
+#define NELEM(x) (sizeof(x)/sizeof((x)[0]))
\ No newline at end of file
diff --git a/git b/git
new file mode 100644
index 0000000..a704637
Binary files /dev/null and b/git differ
diff --git a/syscall.c b/syscall.c
index ee85261..6575764 100644
--- a/syscall.c
+++ b/syscall.c
@@ -103,6 +103,7 @@ extern int sys_unlink(void);
 extern int sys_wait(void);
 extern int sys_write(void);
 extern int sys_uptime(void);
+extern int syscounter; //Extra
 
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -126,11 +127,13 @@ static int (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_getsyscallinfo]   getsyscallinfo,
 };
 
 void
 syscall(void)
 {
+  syscounter++;
   int num;
   struct proc *curproc = myproc();
 
diff --git a/syscall.h b/syscall.h
index bc5f356..420cb75 100644
--- a/syscall.h
+++ b/syscall.h
@@ -20,3 +20,4 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_getsyscallinfo 22
\ No newline at end of file
diff --git a/syscount.c b/syscount.c
new file mode 100644
index 0000000..77f21a4
--- /dev/null
+++ b/syscount.c
@@ -0,0 +1,12 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+#include "fcntl.h"
+
+
+int
+main(void){
+
+printf(1, "The number of accumulating System Calls are: %d\n", getsyscallinfo());
+exit();
+}
\ No newline at end of file
diff --git a/sysproc.c b/sysproc.c
index 0686d29..59d6ae6 100644
--- a/sysproc.c
+++ b/sysproc.c
@@ -6,6 +6,7 @@
 #include "memlayout.h"
 #include "mmu.h"
 #include "proc.h"
+int syscounter = -1;
 
 int
 sys_fork(void)
@@ -89,3 +90,15 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+int
+getsyscallinfo(void)
+{
+  if (syscounter == -1){
+    return syscounter;
+    }
+  else{
+    return syscounter + 1;
+    }
+  
+}
\ No newline at end of file
diff --git a/user.h b/user.h
index 4f99c52..33c2ec9 100644
--- a/user.h
+++ b/user.h
@@ -23,6 +23,7 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int getsyscallinfo(void);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/usys.S b/usys.S
index 8bfd8a1..175b642 100644
--- a/usys.S
+++ b/usys.S
@@ -29,3 +29,4 @@ SYSCALL(getpid)
 SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
+SYSCALL(getsyscallinfo)
